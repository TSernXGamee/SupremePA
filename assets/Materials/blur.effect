// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        radius: { value: 1.0 }
        sample: { value: 1.0 }
        resolution: { value: [1.0, 1.0] }
        scaler: { value: 2.0 }
}%


CCProgram vs %{

  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%
    #ifdef GL_ES


CCProgram fs %{

  precision highp float;
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform RET{
     float radius;
     float sample;
     vec2 resolution;
     float scaler;
  };

  vec4 blur(vec2 p)
  {
    vec4 col = vec4(0);
    vec2 unit = 1.0/resolution.xy;

    const float r = 10.0;
    const float step = 1.0;

    float count = 0.0;

    for(float x = -r; x < r; x += step)
    {
        for(float y = -r; y < r; y += step)
        {
            float w = (r - abs(x)) * (r-abs(y));
            col += texture(texture, p + vec2(x * unit.x, y * unit.y)) * w;
            count += (w);
        }
    }
    return col / count;
  }

  void main () {

    vec4 col = blur(v_uv0);
    gl_FragColor = vec4(col) * v_color;
  }
}%
