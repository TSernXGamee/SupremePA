{
  "ver": "1.0.25",
  "uuid": "db590b13-a43a-4f95-ace2-65d083432656",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 resolution;\nvec4 blur(vec2 p)\n{\n  vec4 col = vec4(0);\n  vec2 unit = 1.0/resolution.xy;\n  const float r = 10.0;\n  const float step = 1.0;\n  float count = 0.0;\n  for(float x = -r; x < r; x += step)\n  {\n      for(float y = -r; y < r; y += step)\n      {\n          float w = (r - abs(x)) * (r-abs(y));\n          col += texture2D(texture, p + vec2(x * unit.x, y * unit.y)) * w;\n          count += (w);\n      }\n  }\n  return col / count;\n}\nvoid main () {\n  vec4 col = blur(v_uv0);\n  gl_FragColor = vec4(col) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform RET{\n   float radius;\n   float sample;\n   vec2 resolution;\n   float scaler;\n};\nvec4 blur(vec2 p)\n{\n  vec4 col = vec4(0);\n  vec2 unit = 1.0/resolution.xy;\n  const float r = 10.0;\n  const float step = 1.0;\n  float count = 0.0;\n  for(float x = -r; x < r; x += step)\n  {\n      for(float y = -r; y < r; y += step)\n      {\n          float w = (r - abs(x)) * (r-abs(y));\n          col += texture(texture, p + vec2(x * unit.x, y * unit.y)) * w;\n          count += (w);\n      }\n  }\n  return col / count;\n}\nvoid main () {\n  vec4 col = blur(v_uv0);\n  gl_FragColor = vec4(col) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}