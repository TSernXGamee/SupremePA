// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        color: {value: [1.0, 1.0, 1.0, 1.0], editor: {type: color}}
        threshold: {value: 1.0}
        radius: {value: 0.01}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
     
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform RET {
    vec4 color;
    float radius;
    float threshold;
  };

  void main () 
  {
    float rad = radius;
    vec4 accum = vec4(0.0);
    vec4 normal = vec4(0.0);
    
    normal = texture(texture, vec2(v_uv0.x, v_uv0.y));
    
    accum += texture(texture, vec2(v_uv0.x - rad, v_uv0.y - rad));
    accum += texture(texture, vec2(v_uv0.x + rad, v_uv0.y - rad));
    accum += texture(texture, vec2(v_uv0.x + rad, v_uv0.y + rad));
    accum += texture(texture, vec2(v_uv0.x - rad, v_uv0.y + rad));
    
    accum *= threshold;
    //accum =  color * accum.a;
    //accum.a = 1.0;

    accum.rgb = color.rgb * color.a * accum.a;
    
    normal = ( accum * (1.0 - normal.a)) + (normal * normal.a);
    
    //normal = (accum * opacity) + (normal * normal.a);

    gl_FragColor = v_color * normal;
  }
}%
